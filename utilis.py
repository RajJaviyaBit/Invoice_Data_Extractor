# import base library
import base64
import io
import os
import datetime

# Import third party library
from groq import Groq
from dotenv import load_dotenv
from pdf2image import convert_from_path
import jwt
from qreader import QReader
import numpy as np
import re
import json
import Levenshtein

load_dotenv()
api_key = os.getenv("GROQ_API_KEY")
client = Groq(api_key=api_key)
qreader = QReader()

def data_from_qr(image_from_pdf : list):
    image1 = np.array(image_from_pdf[0])
    qr_text = qreader.detect_and_decode(image1)
    decoded_qr_text= jwt.decode(qr_text[0], options={"verify_signature": False})
    qr_data = json.loads(r"{}".format(decoded_qr_text['data']))
    return qr_data

def response_process(answer):
    answer = re.sub("\n" , "" , answer)
    answer = re.sub("json" , "" , answer)
    answer = re.sub("```" , "" , answer)
    final = json.loads(r"{}".format(answer))
    return final

def encode_image(images : list, prompt):
    content = [{"type": "text", "text": prompt}]
    # content = [{"type": "text", "text": text}]
    for image in images:
        b = io.BytesIO()
        image.save(b, 'jpeg')
        im_bytes = b.getvalue()
        img = base64.b64encode(im_bytes).decode('utf-8')
        # encoded_images.append(img)
        content.append({"type": "image_url",
                        "image_url": {"url": f"data:image/jpeg;base64,{img}",},
                    })
    return content

# PAN_VAL = re.compile(r"^[A-Z]{5}[0-9]{4}[A-Z]{1}$")
# GST_VAL = re.compile(r"^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$")

# prompt
def call_prompt():
    return """
Role: - You are the information extractor from image of invoice.
Instruction:
- Strictly follow all the rule specially no 6.
- check the value as per validation of all the field, if value does not as per validation then write value as null.
- Dealer or consigner or seller or supplier or service provide is who sells the service or product, the invoice generated by him.
- Buyer or consignee or Recipient is who buys the service or product
- hiib is HYUNDAI INDIA INSURANCE BROKING. so all the value related to hiib is of value of the HYUNDAI INDIA INSURANCE BROKING.
- All the details regarding to bank must be extracted from Bank details table or place.
- Don't add other field's value in description_of_service.  

Task:
1) Extract the data of the given field.
2) convert the data in to JSON.

Field:
irn
ack_no
ack_date
invoice_no
invoice_date
taxable_value
cgst_amount
sgst_utgst_amount
igst_amount
total_invoice_value
dealer_code
hiib_misp_code
account_holders_name
bank_name
account_no
branch
bank_ifsc
micr_code
hiib_gstin
dealer_gstin
hiib_pincode
dealer_pincode
hiib_state_code
dealer_state_code
msme_code
dealer_pan
sac
consigner_details
consigner_address
consigner_pincode
buyer_name
buyer_address
buyer_pincode
consigner_place_of_supply
buyer_place_of_supply
description_of_service
oem
quantity
period_of_service

rules:
1) All the data should be from image given.
2) Output consist only json, do not show how you reach to the output
3) Follow all validation given for the field.
4) all Date must be in dd/mm/yy format.
5) If you can't find the value for any field then put null for that value. Do not write anything instead of it.
6) If you cant find PAN number of any party and you have GST number of that party then PAN no will be 3 to 12 letter of GST num for that party, here party means buyer or seller.
7) If given image is not invoice then give output as 'Given file is not invoice can not extract the data.
8) irn is 64 char long alphanumeric, if you cant find it till length of 64 then try agian till you get it 64 char long.
9) account_no and ack_no are different account_no is bank account no and ack_no is acknowledge no.

validation:
1) length of irn number is 64 and it is alphanumeric.
2) length of ack_no is 15 and it's numeric.
3) hiib_misp_code is in the form of HIIB-MHY-<4 numbers> or MHY-<4 numbers>.
4) ifsc code is in "^[A-Z]{4}0[A-Z0-9]{6}$" pattern.
5) MICR code is numeric code with length of 9.
6) GST no are in "^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$" format.
7) Pin Code and State Code are numeric. 
8) PAN no should be in ^[A-Z]{5}[0-9]{4}[A-Z]{1}$ format.
9) sac is 6 digit number.
10) Quantity is nutural number.
11) ack_no, taxable_value, cgst_amount,sgst_utgst_amount,igst_amount,total_invoice_value, account_no, micr_code, hiib_pincode, dealer_pincode, hiib_state_code, dealer_state_code, sac, consigner_pincode, buyer_pincode, quantity are in numeric datatype.
12) irn, invoice_no, dealer_code, hiib_misp_code, account_holders_name, bank_name, branch, bank_ifsc, hiib_gstin, dealer_gstin, msme_code, dealer_pan, consigner_details, consigner_address, buyer_name, buyer_address, consigner_place_of_supply, buyer_place_of_supply, description_of_service, oem, period_of_service are in string datatype.
Output Format:-
- do not show explaination.
- there should not be any markdown, backticks or anything else.
- output consist only and only json like below.
- all the value must be string even write null in string. 
 json format
    <curly braces start> <field_name>: <value>, ...., <field_name> : <value> <curly braces end>
- if given image is not of Invoice then return below JSON.
    { "Invalid Image": "Given Image is not invoice." }
"""


def extract_data_from_pdf(path):
    # Convert pdf to image 
    images = convert_from_path(path, fmt= 'jpeg')
    print("No of Images:- ",len(images))
    # encode image
    prompt = call_prompt()
    content = encode_image(images=images, prompt=prompt)

    messages=[
            {
                "role": "user",
                "content": content,
            }
        ]

    model_name = "meta-llama/llama-4-maverick-17b-128e-instruct"
    chat_completion = client.chat.completions.create(model= model_name, messages=messages)

    # response 
    response = chat_completion.choices[0].message.content
    print(response)
    
    time_token = chat_completion.usage
    # remove the \n and ``` and json
    final = response_process(response)

    # Solves problem of IRN, GST, PAN
    try:
        qr_text = data_from_qr(images)
        irn_dist = Levenshtein.distance(final["irn"], qr_text["Irn"])
        if 0 <= irn_dist <= 3:
            final["irn"] = qr_text["Irn"]

        dealer_gst_dist = Levenshtein.distance(final['dealer_gstin'], qr_text['SellerGstin'])
        if 0 < dealer_gst_dist <= 2:
            final["dealer_gstin"] = qr_text['SellerGstin']

        hiib_gst_dist = Levenshtein.distance(final['hiib_gstin'], qr_text['BuyerGstin'])
        if 0 < hiib_gst_dist <= 2:
            final['hiib_gstin'] = qr_text['BuyerGstin']

        dealer_pan_dist = Levenshtein.distance(final["dealer_pan"], qr_text['SellerGstin'][2:-3])
        if 0 < dealer_pan_dist <= 2:  
            final["dealer_pan"] = qr_text['SellerGstin'][2:-3]
    except Exception as e:
        print(f"Error in QR code. {str(e)}")
    
    

    # Solves problem of 0 and O in GST and PAN
    # final["dealer_pan"] = normalize_code(str(final.get("dealer_pan", "")), PAN_VAL, PAN_RULES)
    # final["hiib_gstin"] = normalize_code(str(final.get("hiib_gstin", "")), GST_VAL, GST_RULES)
    # final["dealer_gstin"] = normalize_code(str(final.get("dealer_gstin", "")), GST_VAL, GST_RULES)

    return final, time_token, images

def validate_response(final: dict):
    invalidate_fields = []
    patterns = {
        "irn": re.compile(r"^[A-Za-z0-9]{64}$"),
        "ack_no": re.compile(r"^[0-9]{15}$"),
        "taxable_value": re.compile(r"[-+]?([0-9]*[.])?[0-9]+([eE][-+]?[0-9])?"),
        "total_invoice_value": re.compile(r"[-+]?([0-9]*[.])?[0-9]+([eE][-+]?[0-9])?"),
        "hiib_misp_code": re.compile(r"^(HIIB|)(-| )?MHY(-| )?[0-9]{4}$"),
        "bank_ifsc": re.compile(r"^[A-Z]{4}0[A-Z0-9]{6}$"),
        "hiib_gstin": re.compile(r"^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$"),
        "dealer_gstin": re.compile(r"^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$"),
        "hiib_pincode": re.compile(r"^[0-9]{6}$"),
        "dealer_state_code": re.compile(r"^([0-9]{2})|([0-9]{1})$"),
        "dealer_pan": re.compile(r"^[A-Z]{5}[0-9]{4}[A-Z]{1}$"),
        "dealer_pincode": re.compile(r"^[0-9]{6}$"),
        "hiib_state_code": re.compile(r"^([0-9]{2})|([0-9]{1})$"),
        "sac": re.compile(r"^[0-9]{6}$"),
        "consigner_pincode": re.compile(r"^[0-9]{6}$"),
        "buyer_pincode": re.compile(r"^[0-9]{6}$")
    }

    # Special case: clean IRN before validation
    if "irn" in final:
        final["irn"] = final["irn"].replace("-", "")

    # Validate all fields
    for field, regex in patterns.items():
        if field in final:
            if not re.fullmatch(regex, str(final[field])):
                invalidate_fields.append(field)

    # Write response in file
    with open("output.txt", "a+") as f:
        f.write(str(datetime.datetime.now()))
        f.write(str(final))
        f.write("\n")

    return final, invalidate_fields

def verify_response(image, empty_keys):

    prompt1 = f"""
    Role:- You are the information extractor from image.
    Instruction:-
    - Strictly follow all the rule specially no 4.
    - check the value as per validation of all the field, if value does not as per validation then write value as null.
    - Dealer or consigner or seller or supplier or service provide is who sells the service or product, the invoice generated by him.
    - Buyer or consignee or Recipient is who buys the service or product
    - hiib is HYUNDAI INDIA INSURANCE BROKING. so all the value related to hiib is of value of the HYUNDAI INDIA INSURANCE BROKING.
    - All the details regarding to bank must be extracted from Bank details table or place.

    task: 
    - Extract the value for the below field value from the given image.
    - Give the output in JSON format
    field:- {empty_keys}

    note: If you can't find any value then put null for the value.

    rules:
    1) All the data should be from image given.
    2) all Date must be in dd/mm/yy format.
    3) if MSME code in field then MSME Code should be in form of UDYAM-TS-02-0033008, it always start with UDYAM.
    4) If you can't find the value for any field then put null for that value. Do not write anything instead of it.
    5) Account holder name must in Bank details of the image if it's not there then put null as value in output
    6) output should be only json, nothing else.
    7) Do not show how you reach to output untill asked explicitly
    8) account_no and ack_no are different account_no is bank account no and ack_no is acknowledge no.

    Output Format:-
    - do not show explaination.
    - there should not be any markdown, backticks or anything else.
    - output consist only and only json like below.
    - all the value must be string even write null in string. 
     json format
        <curly braces start> <field_name>: <value>, ...., <field_name> : <value> <curly braces end>
    """
    content = encode_image(image, prompt1)
    content = [{"type": "text", "text": prompt1}]
        
    messages=[
            {
                "role": "user",
                "content": content,
            }
        ]
    model_name = "meta-llama/llama-4-maverick-17b-128e-instruct"
    chat_completion1 = client.chat.completions.create(model= model_name, messages=messages)
    time_token = chat_completion1.usage
    response1 = chat_completion1.choices[0].message.content
    print(response1)
    answer = response_process(answer=response1)
    return answer, empty_keys, time_token

def response_concate(final : dict, answer : dict):
    for key, value in answer.items():
        final[key] = value
    return final